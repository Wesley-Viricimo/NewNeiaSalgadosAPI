
generator client {
  provider = "prisma-client-js"
  previewFeatures = ["multiSchema"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  schemas  = ["sales"]
}

model User {
  idUser                Int                 @default(autoincrement()) @id
  name                  String 
  surname               String
  cpf                   String              @unique() @db.VarChar(11)
  phone                 String
  email                 String              @unique()
  password              String
  role                  String              @default("CLIENTE")
  isActive              Boolean             @default(false)
  address               Address[]
  order                 Order[]
  auditing              Auditing[]
  notificationsRead     NotificationRead[]
  notificationToken     UserNotificationToken?  @relation("UserToNotificationToken")
  userActivationCode    UserActivationCode? @relation("UserToActivationCode")  
  createdAt             DateTime            @default(now())
  updatedAt             DateTime            @updatedAt 

  @@schema("sales")
}

model UserNotificationToken {
  idToken               Int                 @default(autoincrement()) @id
  idUser                Int                 @unique()
  token                 String              
  user                  User                @relation("UserToNotificationToken", fields: [idUser], references: [idUser], onDelete: Cascade, onUpdate: Cascade)
  createdAt             DateTime            @default(now())
  updatedAt             DateTime            @updatedAt

  @@schema("sales")
}

model UserActivationCode {
  idCode                Int                 @default(autoincrement()) @id
  idUser                Int                 @unique()
  code                  String              @db.Char(5)
  confirmed             Boolean             @default(false)
  user                  User                @relation("UserToActivationCode", fields: [idUser], references: [idUser], onDelete: Cascade, onUpdate: Cascade)
  createdAt             DateTime            @default(now())
  updatedAt             DateTime            @updatedAt 
  @@schema("sales")
}

model Address {
  idAddress             Int                 @default(autoincrement()) @id
  cep                   String
  state                 String
  city                  String
  district              String 
  road                  String
  number                String
  complement            String?
  idUser                Int
  user                  User                @relation(fields: [idUser], references: [idUser], onDelete: Cascade, onUpdate: Cascade)
  order                 Order[]
  createdAt             DateTime            @default(now())
  updatedAt             DateTime            @updatedAt

  @@schema("sales")
}

model Product {
  idProduct             Int                 @default(autoincrement()) @id
  title                 String              @unique()
  description           String
  price                 Float     
  urlImage              String?
  idCategory            Int 
  category              Category            @relation("CategoryProducts", fields: [idCategory], references: [idCategory], onDelete: Cascade, onUpdate: Cascade)
  createdAt             DateTime            @default(now())
  updatedAt             DateTime            @updatedAt

  @@schema("sales")
}

model Category {
  idCategory            Int                 @default(autoincrement()) @id
  description           String              @unique
  products              Product[]           @relation("CategoryProducts")
  createdAt             DateTime            @default(now())
  updatedAt             DateTime            @updatedAt

  @@schema("sales")
}

model Order {
  idOrder               Int                 @default(autoincrement()) @id
  idAddress             Int?
  idUser                Int
  orderStatus           String
  paymentMethod         String
  typeOfDelivery        String
  totalAdditional       Float               @default(0.0)
  total                 Float
  user                  User                @relation(fields: [idUser], references: [idUser], onDelete: Cascade, onUpdate: Cascade)
  address               Address?            @relation(fields: [idAddress], references: [idAddress], onDelete: Cascade, onUpdate: Cascade)
  orderItens            OrderItem[]
  orderAdditional       OrderAdditional[]   
  orderStatusUpdatedAt  DateTime?
  deliveryDate          DateTime?
  createdAt             DateTime            @default(now())
  updatedAt             DateTime            @updatedAt

  @@schema("sales")
}

model OrderItem {
  idOrderItem           Int                 @default(autoincrement()) @id
  idOrder               Int
  description           String
  price                 Float
  quantity              Int
  comment               String?
  order                 Order               @relation(fields: [idOrder], references: [idOrder], onDelete: Cascade, onUpdate: Cascade)
  createdAt             DateTime            @default(now())
  updatedAt             DateTime            @updatedAt

  @@schema("sales")
}

model Additional {
  idAdditional          Int                 @default(autoincrement()) @id
  description           String              @unique
  price                 Float
  productAdditional     OrderAdditional[]
  createdAt             DateTime            @default(now())
  updatedAt             DateTime            @updatedAt

  @@schema("sales")
}

model OrderAdditional {
  idProductAdditional   Int                 @default(autoincrement()) @id
  idOrder               Int
  idAdditional          Int
  description           String
  price                 Float
  order                 Order               @relation(fields: [idOrder], references: [idOrder], onDelete: Cascade, onUpdate: Cascade)
  additional            Additional          @relation(fields: [idAdditional], references: [idAdditional])
  createdAt             DateTime            @default(now())
  updatedAt             DateTime            @updatedAt

  @@schema("sales")
}

model Auditing {
  idAuditing            Int                 @default(autoincrement()) @id
  idUser                Int
  changeType            String
  operation             String              
  description           String
  user                  User                @relation(fields: [idUser], references: [idUser], onDelete: NoAction, onUpdate: NoAction)
  createdAt             DateTime            @default(now())

  @@schema("sales")
}

model Notification {
  idNotification        Int                 @id @default(autoincrement())   
  description           String
  read                  Boolean             @default(false)
  readBy                NotificationRead[]
  createdAt             DateTime            @default(now())

  @@schema("sales")
}

model NotificationRead {
  idNotificationRead    Int                 @id @default(autoincrement())
  idNotification        Int
  idUser                Int
  notification          Notification        @relation(fields: [idNotification], references: [idNotification], onDelete: Cascade, map: "fk_notificationread_notification")
  user                  User                @relation(fields: [idUser], references: [idUser], onDelete: Cascade, map: "fk_notificationread_user")
  readAt                DateTime            @default(now()) @map("createdAt")

  @@unique([idNotification, idUser])
  @@schema("sales")
}



