
generator client {
  provider = "prisma-client-js"
  previewFeatures = ["multiSchema"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  schemas  = ["sales"]
}

model User {
  idUser                Int                 @default(autoincrement()) @id
  name                  String 
  surname               String
  cpf                   String              @unique() @db.VarChar(11)
  phone                 String
  email                 String              @unique()
  password              String
  role                  String              @default("CLIENTE")
  isActive              Boolean             @default(false)
  address               Address[]
  order                 Order[]
  userActivationCode    UserActivationCode? @relation("UserToActivationCode")  
  createdAt             DateTime            @default(now())
  updatedAt             DateTime            @updatedAt 

  @@schema("sales")
}

model UserActivationCode {
  idCode                Int                 @default(autoincrement()) @id
  idUser                Int                 @unique()
  code                  String              @db.Char(5)
  confirmed             Boolean             @default(false)
  user                  User                @relation("UserToActivationCode", fields: [idUser], references: [idUser], onDelete: Cascade, onUpdate: Cascade)
  createdAt             DateTime            @default(now())
  updatedAt             DateTime            @updatedAt 
  @@schema("sales")
}

model Address {
  idAddress             Int                 @default(autoincrement()) @id
  cep                   String
  state                 String
  city                  String
  district              String 
  road                  String
  number                String
  complement            String?
  idUser                Int
  user                  User                @relation(fields: [idUser], references: [idUser], onDelete: Cascade, onUpdate: Cascade)
  order                 Order[]
  createdAt             DateTime            @default(now())
  updatedAt             DateTime            @updatedAt

  @@schema("sales")
}

model Product {
  idProduct             Int                 @default(autoincrement()) @id
  description           String              @unique()
  price                 Float     
  urlImage              String?
  idCategory            Int 
  category              Category            @relation("CategoryProducts", fields: [idCategory], references: [idCategory], onDelete: Cascade, onUpdate: Cascade)
  createdAt             DateTime            @default(now())
  updatedAt             DateTime            @updatedAt

  @@schema("sales")
}

model Category {
  idCategory            Int                 @default(autoincrement()) @id
  description           String              @unique
  products              Product[]           @relation("CategoryProducts")
  createdAt             DateTime            @default(now())
  updatedAt             DateTime            @updatedAt

  @@schema("sales")
}

model Order {
  idOrder               Int                 @default(autoincrement()) @id
  idAddress             Int
  idUser                Int
  orderStatus           String
  paymentMethod         String
  typeOfDelivery        String
  total                 Float
  user                  User                @relation(fields: [idUser], references: [idUser], onDelete: Cascade, onUpdate: Cascade)
  address               Address             @relation(fields: [idAddress], references: [idAddress], onDelete: Cascade, onUpdate: Cascade)
  orderItens            OrderItem[]
  orderStatusUpdatedAt  DateTime?
  deliveryDate          DateTime?
  createdAt             DateTime            @default(now())
  updatedAt             DateTime            @updatedAt

  @@schema("sales")
}

model OrderItem {
  idOrderItem           Int                 @default(autoincrement()) @id
  idOrder               Int
  description           String
  price                 Float
  quantity              Int
  order                 Order               @relation(fields: [idOrder], references: [idOrder], onDelete: Cascade, onUpdate: Cascade)
  createdAt             DateTime            @default(now())
  updatedAt             DateTime            @updatedAt

  @@schema("sales")
}


